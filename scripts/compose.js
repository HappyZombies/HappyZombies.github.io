import { promises as fs } from 'fs';
import path from 'path';
import matter from 'gray-matter';

const root = process.cwd();

const postsJson = {};

const template = () => `// This file is autogenerated by /scripts/compose.js, do not edit; to make changes run the compose script and/or consult the README.md (or modify if you know what you're doing)
const posts = ${JSON.stringify(postsJson)};
export default posts;`

const compose = async () => {
    const postsPath = path.join(root, 'src', 'posts');
    // read all the subdirectories in the posts directory
    const fileNames = await fs.readdir(postsPath, { withFileTypes: true });
    const postsList = fileNames.filter(fileName => fileName.isDirectory()).map(directory => directory.name);
    // iterate through each directory, setup up our postsJson object and go into each sub directory to create each markdown file.
    for (let index = 0; index < postsList.length; index++) {
        const postDirectoryName = postsList[index];
        const currentPostDirectory = path.join(root, 'src', 'posts', postDirectoryName);
        // get all the file from the subdirectory
        const files = await fs.readdir(currentPostDirectory);
        postsJson[postDirectoryName] = [];
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const filePath = path.join(root, 'src', 'posts', postDirectoryName, file);
            const mdContent = await fs.readFile(filePath);
            const matterObj = matter(mdContent);
            const postJson = {
                title: matterObj.data.title,
                category: matterObj.data.category,
                date: matterObj.data.date,
                dateObject: new Date(matterObj.data.date),
                path: `${postDirectoryName}/${file}`,
                id: path.parse(file).name,
                draft: Boolean(matterObj.data.draft)
            }
            postsJson[postDirectoryName].push(postJson);
        }
        postsJson[postDirectoryName].sort((a, b) => {
            return new Date(b.dateObject) - new Date(a.dateObject);
        })
    }
    const jsTemplate = template();
    const filePath = `${postsPath}/index.js`;
    fs.writeFile(filePath, jsTemplate);
    console.log("Done!");
}

compose();
